// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package vsphere

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a VMware vSphere host resource. This represents an ESXi host that
// can be used either as part of a Compute Cluster or Standalone.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-vsphere/blob/master/website/docs/r/host.html.markdown.
type Host struct {
	s *pulumi.ResourceState
}

// NewHost registers a new resource with the given unique name, arguments, and options.
func NewHost(ctx *pulumi.Context,
	name string, args *HostArgs, opts ...pulumi.ResourceOpt) (*Host, error) {
	if args == nil || args.Hostname == nil {
		return nil, errors.New("missing required argument 'Hostname'")
	}
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["cluster"] = nil
		inputs["connected"] = nil
		inputs["datacenter"] = nil
		inputs["force"] = nil
		inputs["hostname"] = nil
		inputs["license"] = nil
		inputs["lockdown"] = nil
		inputs["maintenance"] = nil
		inputs["password"] = nil
		inputs["thumbprint"] = nil
		inputs["username"] = nil
	} else {
		inputs["cluster"] = args.Cluster
		inputs["connected"] = args.Connected
		inputs["datacenter"] = args.Datacenter
		inputs["force"] = args.Force
		inputs["hostname"] = args.Hostname
		inputs["license"] = args.License
		inputs["lockdown"] = args.Lockdown
		inputs["maintenance"] = args.Maintenance
		inputs["password"] = args.Password
		inputs["thumbprint"] = args.Thumbprint
		inputs["username"] = args.Username
	}
	s, err := ctx.RegisterResource("vsphere:index/host:Host", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Host{s: s}, nil
}

// GetHost gets an existing Host resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHost(ctx *pulumi.Context,
	name string, id pulumi.ID, state *HostState, opts ...pulumi.ResourceOpt) (*Host, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["cluster"] = state.Cluster
		inputs["connected"] = state.Connected
		inputs["datacenter"] = state.Datacenter
		inputs["force"] = state.Force
		inputs["hostname"] = state.Hostname
		inputs["license"] = state.License
		inputs["lockdown"] = state.Lockdown
		inputs["maintenance"] = state.Maintenance
		inputs["password"] = state.Password
		inputs["thumbprint"] = state.Thumbprint
		inputs["username"] = state.Username
	}
	s, err := ctx.ReadResource("vsphere:index/host:Host", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Host{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Host) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Host) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of the Compute Cluster this host should
// be added to. This should not be set if `datacenter` is set.
func (r *Host) Cluster() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cluster"])
}

// If set to false then the host will be disconected.
// Default is `false`.
func (r *Host) Connected() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["connected"])
}

// The ID of the datacenter this host should
// be added to. This should not be set if `cluster` is set.
func (r *Host) Datacenter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datacenter"])
}

// If set to true then it will force the host to be added, even
// if the host is already connected to a different vSphere instance. Default is `false`
func (r *Host) Force() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["force"])
}

// FQDN or IP address of the host to be added.
func (r *Host) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

// The license key that will be applied to the host.
// The license key is expected to be present in vSphere.
func (r *Host) License() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["license"])
}

// Set the lockdown state of the host. Valid options are
// `disabled`, `normal`, and `strict`. Default is `disabled`.
func (r *Host) Lockdown() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lockdown"])
}

// Set the management state of the host. Default is `false`.
func (r *Host) Maintenance() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["maintenance"])
}

// Password that will be used by vSphere to authenticate
// to the host.
func (r *Host) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// Host's certificate SHA-1 thumbprint. If not set the the
// CA that signed the host's certificate should be trusted. If the CA is not trusted
// and no thumbprint is set then the operation will fail.
func (r *Host) Thumbprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["thumbprint"])
}

// Username that will be used by vSphere to authenticate
// to the host.
func (r *Host) Username() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["username"])
}

// Input properties used for looking up and filtering Host resources.
type HostState struct {
	// The ID of the Compute Cluster this host should
	// be added to. This should not be set if `datacenter` is set.
	Cluster interface{}
	// If set to false then the host will be disconected.
	// Default is `false`.
	Connected interface{}
	// The ID of the datacenter this host should
	// be added to. This should not be set if `cluster` is set.
	Datacenter interface{}
	// If set to true then it will force the host to be added, even
	// if the host is already connected to a different vSphere instance. Default is `false`
	Force interface{}
	// FQDN or IP address of the host to be added.
	Hostname interface{}
	// The license key that will be applied to the host.
	// The license key is expected to be present in vSphere.
	License interface{}
	// Set the lockdown state of the host. Valid options are
	// `disabled`, `normal`, and `strict`. Default is `disabled`.
	Lockdown interface{}
	// Set the management state of the host. Default is `false`.
	Maintenance interface{}
	// Password that will be used by vSphere to authenticate
	// to the host.
	Password interface{}
	// Host's certificate SHA-1 thumbprint. If not set the the
	// CA that signed the host's certificate should be trusted. If the CA is not trusted
	// and no thumbprint is set then the operation will fail.
	Thumbprint interface{}
	// Username that will be used by vSphere to authenticate
	// to the host.
	Username interface{}
}

// The set of arguments for constructing a Host resource.
type HostArgs struct {
	// The ID of the Compute Cluster this host should
	// be added to. This should not be set if `datacenter` is set.
	Cluster interface{}
	// If set to false then the host will be disconected.
	// Default is `false`.
	Connected interface{}
	// The ID of the datacenter this host should
	// be added to. This should not be set if `cluster` is set.
	Datacenter interface{}
	// If set to true then it will force the host to be added, even
	// if the host is already connected to a different vSphere instance. Default is `false`
	Force interface{}
	// FQDN or IP address of the host to be added.
	Hostname interface{}
	// The license key that will be applied to the host.
	// The license key is expected to be present in vSphere.
	License interface{}
	// Set the lockdown state of the host. Valid options are
	// `disabled`, `normal`, and `strict`. Default is `disabled`.
	Lockdown interface{}
	// Set the management state of the host. Default is `false`.
	Maintenance interface{}
	// Password that will be used by vSphere to authenticate
	// to the host.
	Password interface{}
	// Host's certificate SHA-1 thumbprint. If not set the the
	// CA that signed the host's certificate should be trusted. If the CA is not trusted
	// and no thumbprint is set then the operation will fail.
	Thumbprint interface{}
	// Username that will be used by vSphere to authenticate
	// to the host.
	Username interface{}
}
